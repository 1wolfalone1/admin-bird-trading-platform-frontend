# Query: console.log.*$
# Flags: RegExp
# ContextLines: 1

122 results - 31 files

src\index.js:
  30  // If you want to start measuring performance in your app, pass a function
  31: // to log results (for example: reportWebVitals(console.log))
  32  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals

src\api\api.js:
  21        }
  23        return config;

src\component\chart\statics-treding-products-bump-chart\StaticsTrendingProductsBumpChart.jsx:
  75  export default function StaticsTrendingProductsBumpChart({ data }) {
  77     return (

src\component\chart\summary-chart\SummaryChartShop.jsx:
  6  export default function SummaryChartShop({data}) {
  8     return (

src\component\data-grid\products-data-grid-shop\ProductsDataGridShop.jsx:
   38        // Here you save the data you need from the filter model
   40        let filterObject = filterModel.items[0];
   42        if (

   84     const handleRowChange = (row) => {
   86     };

  103           const data = await response.data;
  105        } catch (e) {
  106:          console.log(e);
  107        }

  110     const handleProcessRowUpdateError = (newRow, oldRow) => {
  112     };

  182     const handleChange = (e) => {
  184        let newValue = e.target.value.replace(/[^0-9]/g, "");
  185        const error = Number(+e.target.value) > 100000;
  186:       console.log(error, "erorrrrrrrrrrrrrrrrrrr", value, newValue);
  187        if (error) {

  223     const handleFilterChange = (event) => {
  225        let newItem = { ...item, value: event.target.value };

  245     const handleFilterChange = (event) => {
  247        let newItem = { ...item, value: event.target.value };

  351        // preProcessEditCellProps: (params) => {
  352:       //    console.log(params);
  353        //    const hasError = Number(+params.props.value) > 10000;

src\component\form-update-product\form-sales-info\FormSalesInfo.jsx:
  79        dispatch(getListVouchers());
  81     }, []);

src\component\get-token\GetToken.jsx:
  13     const location = useLocation();
  15     const params = new URLSearchParams(window.location.search);

  29           const data = res.data;
  31           const role = userRole.SHOP_OWNER.code;

  39        } catch (e) {
  40:          console.log(e);
  41        }

src\component\input-file\InputFile.jsx:
  21           files = e.dataTransfer.files;
  23        } else if (e.target) {

  25           setImageFile(e.target.files[0]);
  27        }

  56           //  });
  57:          //  console.log(cropperRef.current?.cropper);
  58:          //  console.log()
  59           cropperRef.current?.cropper.setCropBoxData({

  72        try {

src\component\input-media-file\InputImageFile.jsx:
  54        return async (currentEdit2) => {
  55:          console.log(
  56              "asdfasdfkajlsdfhkajs dfkjasdf hjasd hfasdh akjsdasujd fasdf sad "

  65              //  });
  66:             //  console.log(cropperRef.current?.cropper);
  67:             //  console.log()
  68              cropperRef.current?.cropper.setCropBoxData({

  97     const handleCrop = async () => {
  99        const dataBase64 = cropperRef.current?.cropper

src\component\input-media-file\InputVideoFile.jsx:
  34        const fileSizeKiloBytes = selectedFile.size / 1024;
  36        if (fileSizeKiloBytes > MAX_FILE_SIZE) {

  59           reader.onload = async () => {
  61              const file = await dataAsyncUrlToFile(reader.result, "video");

  66        } else {
  67:          console.log("erorrrrrrrrrrrr");
  68        }

src\component\list-promotion-in-data-grid\ListPromotionInDataGrid.jsx:
   9  export default function ListPromotionInDataGrid({params}) {
  11     const [anchorEl, setAnchorEl] = useState(null);

src\component\message\PopupMessage.jsx:
   68      handleNewMessage(" ");
   70    }, [message]);

   85    };
   88  

   96      } catch (error) {
   97:       console.log(error);
   98      }
   99:     console.log("Connect to channel message");
  100    };

  102    const onError = (err) => {
  103:     console.log(err);
  104    };

  115        const data = await dispatch(getListUser()); 
  117        if (data?.payload) {

  170        dispatch(messageSlice.actions.addUserIntoUserList({user: user}));
  172      } else {
  175        setUnread(numberUnread);

  192      try {
  193:       console.log(message);
  194        const audio = new Audio(

  213            .catch((error) => {
  214:             console.log(error);
  215            });

  221        // Handle the error
  222:       console.log(error);
  223      }
  224    };
  225:   console.log("here is num open  ", open);
  226  

src\component\message\message-content\MessageContent.jsx:
  47    //     // Handle the scroll event on the specific div
  48:   //     console.log('User scrolled on the div');
  49    //   };

  78      dispatch(messageSlice.actions.setReadMessage({userList: userList, id: currentShopIDSelect})); 
  79:     console.log("here is curren shop id select: ", currentShopIDSelect);
  80    };

  88  
  89:   console.log(messageList.messageListData, "day la shop is")
  90    return (

src\component\message\message-username\MessageUserList.jsx:
  37        dispatch(messageSlice.actions.setReadMessage({userList: userList , id: id})); 
  38:       console.log(id)
  39        setActiveBgColor(id)
  40    }
  41:   console.log('here is an userList', userList)
  42  

src\component\products-shop-page-controller\ProductShopPageController.jsx:
   90        try {
   92           const res = await api.put("/shop-owner/products/status", {

   96           const data = await res.data;
   98           dispatch(getProductTableAndPaging(currentPage));
   99           dispatch(productShopSlice.actions.changeListSelectedRows([]));
  101           if (e.target.value == -1) {
  102:             console.log(e.target.value, openModel);
  103              setOpenModel(false);

  122           );
  123:          console.log(e);
  124        }

src\component\shop-order-bar-controller\ShopOrderBarController.jsx:
   48     useEffect(() => {
   49:       console.log(listSelected);
   50        if (

   59        } else {
   60:          console.log(listSelected, 'list selecteddddddddddddddd')
   61           const isHasTwoStatus = listSelected.some(

  110     const handleChangeStatus = async (event) => {
  111:       console.log(listSelected);
  112        try {

  118           const data = await res.data;
  119:          console.log(data);
  120           dispatch(getOrderFilterPaging(currentPage));
  121:          console.log(event.target.value);
  122           if (event.target.value == 2) {

  143           );
  144:          console.log(e);
  145        }

src\component\shop-order-data-grid\ShopOrderDataGrid.jsx:
   56     };
   57:    console.log(data);
   58  
   59     const handleRowSelectionModelChange = (newRowSelectionModel, a) => {
   60:       console.log(newRowSelectionModel);
   61        let newListSelected = [];

   95        // Here you save the data you need from the filter model
   96:       console.log(filterModel, "filter model");
   97        let filterObject = filterModel.items[0];
   98:       console.log(filterObject, "filter object");
   99        if (

  116     const handleRowChange = (row) => {
  117:       console.log(row);
  118     };
  119:    console.log(data);
  120     useEffect(() => {

  135        //    const data = await response.data;
  136:       //    console.log(data);
  137        // } catch (e) {
  138:       //    console.log(e);
  139        // }

  142     const handleProcessRowUpdateError = (newRow, oldRow) => {
  143:       console.log(newRow, oldRow);
  144     };

  191     const handleFilterChange = (event) => {
  192:       console.log(event.target.value, item, applyValue);
  193        let newItem = { ...item, value: event.target.value };

  213     const handleFilterChange = (event) => {
  214:       console.log(event.target.value, item, applyValue);
  215        let newItem = { ...item, value: event.target.value };

  242     const handleFilterChange = (event) => {
  243:       console.log(event.target.value, item, applyValue);
  244        let newItem = { ...item, value: event.target.value };

  275     const handleFilterChange = (event) => {
  276:       console.log(event.target.value, item, applyValue);
  277        let newItem = { ...item, value: event.target.value };

  329     const handleTo = (value) => {
  330:       console.log(value, item, applyValue);
  331        const milliseconds = Date.parse(value);

  337        const newValue = JSON.stringify(dateForm);
  338:       console.log(newValue);
  339        applyValue({ ...item, value: newValue });

  436        valueFormatter: ({ value }) => {
  437:          console.log(value, 'valueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')
  438           return value.status

src\component\statics-price-category-pie-chart-shop\StaticsPriceByCategory.jsx:
  15           const response = await api.get('/shop-owner/pie-chart');
  16:          console.log(response)
  17           const data = await response.data;
  18:          console.log(data);
  19           setStaticsPieChart(data);

  23     }
  24:    console.log(staticsPieChart);
  25     const animation = {

src\component\statics-trending-products-shop\StaticsTrendingProducts.jsx:
  18           const response = await api.get('/shop-owner/line-chart');
  19:          console.log(response)
  20           const data = await response.data;
  21:          console.log(data);
  22           setStaticTreding(data);

src\container\create-shop-staff\CreateShopStaff.jsx:
  79                 form.setFieldError("userName", "Username already in use!");
  80:                console.log(form);
  81              } else {

  83              }
  84:             console.log(e);
  85           }

src\container\dashboard\DashBoard.jsx:
  44           ]);
  45:          console.log(data, data2, data3);
  46           setPriceBarDataShop(data);

src\container\side-bar\SideBar.jsx:
  11     const userInfo = useSelector(userInfoSliceSelector);
  12:    console.log(userInfo);
  13     return (

src\container\test-page\TestPage.jsx:
  18          onRowSelectionModelChange={(newRowSelectionModel) => {
  19:          console.log(newRowSelectionModel)
  20            setRowSelectionModel(newRowSelectionModel);

src\container\update-product-page\UpdateProductPage.jsx:
  110        if (video !== null && video !== "") {
  111:          console.log(video, "?????????????????????????????");
  112           formData.append("video", video);

  178        formData.append("data", objectToBlob(productData));
  179:       console.log(JSON.stringify(productData), count);
  180        if (count === 0) {

  193           const data = await res.data;
  194:          console.log(data);
  195           dispatch(globalConfigSlice.actions.changeBackDropState(false));

  201        } catch (e) {
  202:          console.log(e);
  203           setCreateStatus({

src\redux\fileControlSlice.js:
  23        addImagesPreview: (state, action) => {
  24:          console.log(action.payload, "image preview");
  25           state.listImagesPreview?.push(action.payload);

  34        changeCurrentEdit: (state, action) => {
  35:          console.log(action.payload);
  36           state.currentEdit = action.payload;

  49        removeImage: (state, action) => {
  50:          console.log(action.payload);
  51           state.listImagesPreview = state.listImagesPreview.filter(

  59           state.videoPreview = "";
  60:          console.log(current(state));
  61        },

  78           .addCase(getListImagesForUpdate.rejected, (state, action) => {
  79:             console.log(action.payload, "errorrrrrrrrrr");
  80           }),

src\redux\messageSlice.js:
   33          setReadMessage: (state, action) => {
   34:           console.log(
   35              'have read message'

   41                    numberRead = item.unread;
   42:                   console.log('have jum in here number read', numberRead);
   43                    return {

   49                });
   50:               console.log(updatedUserList);
   51              // state.message.userList = updatedUserList;

   66          setNumberUnread: (state, action) => {
   67:             console.log(action.payload.numberUnread)
   68              state.message.numberUnread = action.payload.numberUnread

   70          increaseNumberUnread: (state, action) => {
   71:           console.log('+1')
   72              return {

  163            const { user,  } = action.payload;
  164:           console.log(user, "user");
  165            
  166            const existShop = state.message.userList.find(item => item.userId === user.userId);
  167:           console.log("here is an so sanh", existShop);
  168            
  169            if (!existShop) {
  170:             console.log('co vao day');
  171              const updatedUserList = [user, ...state.message.userList];

  186          .addCase(getListUser.rejected, (state, action) => {
  187:             console.log(action)
  188          })

  193          .addCase(sendMessage.rejected, (state, action) => {
  194:             console.log(action)
  195          }) 

  212          } catch (error) {
  213:           console.log(error);
  214          }

  224  
  225:         // console.log("pagenumber default ne ", pageNumber);
  226          try {

  231          } catch (error) {
  232:           console.log(error);
  233          }

  244          }catch (error) {
  245:           console.log(error)
  246          }

src\redux\productDetailsSlice.js:
  27        addNewTag: (state, action) => {
  28:          console.log(current(state), action.payload);
  29           state.listTags.push(action.payload);

  63        } catch (err) {
  64:          console.log(err);
  65        }

  75        } catch (err) {
  76:          console.log(err);
  77        }

  94        } catch (err) {
  95:          console.log(err);
  96        }

src\redux\productDetailsValidateSlice.js:
  114           .addCase(getProductDetailsById.rejected, (state, action) => {
  115:             console.log(action.payload);
  116           }),

src\redux\productsShopSlice.js:
   65           .addCase(getProductTableAndPaging.rejected, (state, action) => {
   66:             console.log("errrrroorrrrrrrrrrrrrrrrrr");
   67              state.productsTable.data = [];

   88           };
   89:          console.log(formData, "dfsfdsfasdfa sdfasdf asdf asdf sd");
   90           const res = await api.get(`shop-owner/products`, {

   96  
   97:          console.log(data, "dfsfdsfasdf dataaaaa")
   98           return {

  103           
  104:          console.log(err);
  105           throw err;

src\redux\shopOrderSlice.js:
  90        } catch (err) {
  91:          console.log(err);
  92           throw err;

src\utils\myUtils.js:
  19     const contentType = await res.headers.get("content-type");
  20:    console.log(contentType, "content-type");
  21     return new File([blob], fileName, { type: contentType });
